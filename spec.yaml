openapi: 3.0.0
info:
  version: 1.0.0
  title: Delilah Resto API
  description: Delilah Resto API for ACAMICA (3rd Proyect). This IS AN api for a delivery food
    Resto

servers:
  - description: Development server
    url: https://localhost:3300  
  - description: SwaggerHub API Auto Mocking
    url: https://virtserver.swaggerhub.com/melinanisenbaum/DelilahResto/1.0.0

# tags are used for organizing operations
tags:
- name: admin
  description: Secured Admin-only calls
- name: user
  description: Operations available to regular users

paths:
  /login:
    post:
      tags:
        - user
      summary: login a user
      operationId: loginUser
      description: By sending a complete form, the user can login into the system
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/user'
      responses: 
        '200':
          description: loggin succesfull
        '400':
          description: invalid input, object invalid
  /register:
    post:
      tags:
        - user
      summary: Creates a user
      operationId: createUser
      description: By sending a complete form, the user can register in the system
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/user'
      responses: 
        '201':
          description: the user has been created
        '400':
          description: invalid input, object invalid
        '409':
          description: the present user already exists
  /users:
    get:
      tags:
       - admin
      summary: Returns a list of users
      operationId: getUsers
      description: By passing in the appropriate options, you can search for selected
        users in the system
      parameters:
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: returns results matching criteria
          content:
            application/json:
              schema: 
                $ref: '#/components/schemas/ArrayOfUsers'
        '400':
          description: bad input parameter
        '403':
          description: unauthorized request
        '404':
          description: users with the specified query were not found
  /users/:userId:
    get:
      tags:
        - user
      summary: returns the user account by id
      operationId: login
      description: Gets an individual user in the system and returns its personal account
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
      responses:
        '200':
          description: user account is available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/user'
        '404':
          description: The specified user was not found
    put:
      tags:
        - user
      summary: Updates an existing user
      operationId: updateUser
      description: updates an individual user information in the system.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/user'
      parameters:
        - $ref: '#/components/parameters/username'
        - $ref: '#/components/parameters/password'
      responses:
        '200':
          description: the update has been succesfull
        '400':
          description: the account could not been updated
    delete:
      tags:
        - user
      summary: deletes an existing user with the specified id
      operationId: deleteUser
      description: deletes an individual user information and id in the system.
      responses:
        '200':
          description: User :id has been deleted
        '404':
          description: The user does not exist
        '409':
          description: server conflict. The account cannot be deleted in this moment.
  /users/:userId/orders:
    get:
      tags:
        - user
      summary: Returns a list of the customer's orders.
      operationId: getCustomerOrders
      responses:
        '200':
          description: returns results
          content:
            multipart/form-data:
              schema: 
                $ref: '#/components/schemas/ArrayOfOrders'
        '403':
          description: unauthorized response
        '503':
          description: service unavailable
    post:
      tags:
        - user
      summary: Creates a new order.
      operationId: createOrder
      description: By sending a complete form, the user can create an order
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/order'
      responses: 
        '201':
          description: the order has been created
        '400':
          description: invalid input, object invalid
  /users/:userId/orders/:orderId:
    put:
      tags:
        - user
        - admin
      summary: Updates an specific order.
      operationId: updateOrder
      responses:
        '200':
          description: returns results
          content:
            multipart/form-data:
              schema: 
                $ref: '#/components/schemas/order'
        '403':
          description: unauthorized response
        '503':
          description: service unavailable
  /users/:userId/orders/delete/:orderId:
    delete:
      tags:
        - user
      summary: deletes an existing order with the specified id
      operationId: deleteOrderByUser
      description: deletes an individual order and id in the system.
      responses:
        '200':
          description: the action has been succesfull
        '401':
          description: an authentication is required
        '404':
          description: The order does not exist
  /products:
    get:
      tags:
        - admin
        - user
      summary: Returns a list of products.
      operationId: getProducts
      description: By passing in the appropriate options, you can search for selected
        products in the system.
      parameters:
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: returns results matching criteria
          content:
            multipart/form-data:
              schema: 
                $ref: '#/components/schemas/ArrayOfProducts'
        '400':
          description: bad input parameter
        '403':
          description: unauthorized response
        '404':
          description: products with the specified query parameter were not found
    post:
      tags:
        - admin
      summary: Creates a new product.
      operationId: createProduct
      description: By sending a complete form, a new user can be added to the system
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/product'
      responses: 
        '200':
          description: The product has been saved
        '400':
          description: invalid input, object invalid
        '409':
          description: The product already exists!
  /products/:productId:
    get:
      tags:
        - admin
        - user
      summary: Returns an specified product.
      operationId: getProduct
      description: By passing in the appropriate options, you can search for selected
        product in the system.
      parameters:
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: returns results matching criteria
          content:
            multipart/form-data:
              schema: 
                $ref: '#/components/schemas/ArrayOfProducts'
        '400':
          description: bad input parameter
        '403':
          description: unauthorized response
        '404':
          description: products with the specified query parameter were not found
    put:
      tags:
        - admin
      summary: Updates an existing product
      operationId: updateProduct
      description: updates an individual product information in the system.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/product'
      responses:
        '200':
          description: the update has been succesfull
        '400':
          description: the product could not been updated
        '401':
          description: an authentication is required
    delete:
      tags:
        - admin
      summary: deletes an existing product with the specified id
      operationId: deleteProduct
      description: deletes an individual product information and id in the system.
      responses:
        '200':
          description: Product id ${productId} has been deleted
        '401':
          description: an authentication is required
        '409':
          description: server conflict. The product cannot be deleted in this moment.
  /orders:
    get:
      tags:
        - admin
      summary: Returns a list of orders.
      operationId: getOrders
      description: By passing in the appropriate options, you can search for selected
        orders in the system.
      parameters:
        - $ref: '#/components/parameters/filter'
      responses:
        '200':
          description: returns results matching criteria
          content:
            multipart/form-data:
              schema: 
                $ref: '#/components/schemas/ArrayOfOrders'
        '403':
          description: unauthorized response
        '404':
          description: products with the specified query parameter were not found
  /orders/:orderId:
    put:
      tags:
        - admin
      summary: Updates the status of an existing order
      operationId: updateOrder
      description: updates an individual order information in the system.
      requestBody:
        required: true
        content:
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/order'
      responses:
        '200':
          description: the update has been succesfull
        '400':
          description: the order could not been updated
        '401':
          description: an authentication is required
    delete:
      tags:
        - admin
      summary: deletes an existing order with the specified id
      operationId: deleteOrder
      description: deletes an individual order and id in the system.
      responses:
        '200':
          description: the action has been succesfull
        '401':
          description: an authentication is required
        '409':
          description: server conflict. The product cannot be deleted in this moment
components:
  schemas:
    user:
      type: object
      required:
      - id
      - username
      - name-lastname
      - email
      - phone-number
      - shipping adress
      - password
      properties:
        id:
          type: integer
          example: 51
        username:
          type: string
          example: florgarcia
        name-lastname:
          type: string 
          example: Melina Nisenbaum
        email:
          type: string
          format: email
          example: melina@melina.com
        phone-number:
          type: string
          example: +54223583759
        shipping adress:
          type: string
          example: los olmos 56, mar del plata, 7600
        password:
          type: string
          example: jhgjjfgsejgjdf
    product:
      type: object
      properties:
        productImg:
          type: string
          format: binary
        productName:
          type: string
          example: Bagel de Salmón
        price:
          type: string
          example: $425  
      required:
        - name
        - price
    ArrayOfUsers:
      type: array
      items:
        type: object
        properties:
          id:
            type: integer
            example: 51
          username:
            type: string
            example: florgarcia
          name-lastname:
            type: string
            example: Melina Nisenbaum
          email:
            type: string
            format: email
            example: melina@melina.com
          phone-number:
            type: string
            example: +54223583759
          shipping adress:
            type: string
            example: los olmos 56, mar del plata, 7600
        required:
          - id
          - username
    ArrayOfProducts:
      type: array
      items:
        type: object
        properties:
          productImg:
            type: string
            format: binary
          name:
            type: string
            example: Bagel de Salmón
          price:
            type: string
            example: $425
        required:
          - name
          - price
    ArrayOfOrders:
      type: array
      items:
        type: object
        properties:
          state:
            type: string
          hour:
            type: string
            example: 12:30PM
          id:
            type: string
            example: #74
          description:
            type: string
            example: 1xHamClass 2xJamvegg 
          payment:
            type: string
            example: credit $590
          user:
            type: string
            example: florgarcia
          shipping adress:
            type: string
            example: los olmos 56, mar del plata, 7600
    order:
      type: object
      properties:
        orderProducts:
          type: array
          items:
            type: object
            properties:
              $ref: '#/components/schemas/product'
          example: 1xHamClass 2xJamvegg
        state:
          type: string
        hour:
          type: string
          format: date-time
          example: 12:30PM
        id:
          type: string
          example: #74
        payment:
          type: string
          example: credit $590
        user:
          type: object
          properties:
            $ref: '#/components/schemas/user'
          example: florgarcia
        shipping adress:
          type: string
          example: los olmos 56, mar del plata, 7600
  parameters:
    filter:
        in: query
        name: filter
        description: pass an optional search string for looking up list
        required: false
        schema:
          type: string
        allowEmptyValue: true
        examples:
          state:
            summary: example of order production state
            value: [online]
          multipleOrderStates:
            summary: example of multiple order production state
            value: [online, production]
          multipleFilters:
            summary: example of multiple filters state
            value: [production, paid]  
    productId:
        in: path
        name: productId
        description: product unique id
        required: true
        schema:
          type: integer
          format: uuid
          example: 51
    orderId:
        in: path
        name: orderId
        description: order unique id
        required: true
        schema:
          type: integer
          format: uuid
          example: 51
    userId:
        in: path
        name: userId
        description: user unique id
        required: true
        schema:
          type: integer
          format: uuid
          example: 51
    username:
        in: query
        name: username
        description: user unique username
        required: true
        schema:
          type: string
          example: florgarcia
        allowEmptyValue: false
    password:
        in: query
        name: password
        description: user unique password
        required: true
        schema:
          type: string
          example: florgarcia23
        allowEmptyValue: false